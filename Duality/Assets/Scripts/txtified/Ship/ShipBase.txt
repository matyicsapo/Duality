using UnityEngine;
using System.Collections.Generic;
using System.Collections;

public abstract class ShipBase : MonoBehaviour {
	public string team;

	public bool on;
	
	public bool coolinDown;

	public Core core;

	public int statusOffsetX;
	public Vector2 statusDimensions;
	
	[System.NonSerialized]
	public int health;
	
	int warmthPercentage;
	float warmthLost;
	
	float lastFrameTime;
	
	float healthColdLost;
	
	protected int energy;
	float energyRecovered;
	
	protected float lastShotTime;
	
	class LastTime {
		public float colorChange;
		public float energyCost;
	}
	LastTime lastTime;

	public float shotOffset;

	public Transform shot;
	protected Transform myGun;
	
	//[System.NonSerialized]
	public Vector2 trgtPos;
	//[System.NonSerialized]
	public Vector2 lastPos;
	
	//protected bool couldMove;
	
	protected float angleTurned;

	public bool isYin;
	
	protected Transform mTransform;
	Material mMaterial;
	
	public Vector2 faceDir = new Vector2(1, 0);
	
	protected class BaseInput {
		public enum ColorChange {None, Invert, Yin, Yang}
		public ColorChange colorChange;
		
		public bool shoot;
		
		public Vector2 moveAxes;
	}
	protected BaseInput mInput;
	
	protected GameManager gm;
	protected LevelManager lm;

	protected virtual void Start () {
		gm = GameObject.FindWithTag("GameManager").GetComponent<GameManager>();
		lm = GameObject.FindWithTag("LevelManager").GetComponent<LevelManager>();
		
		lastTime = new LastTime();
		
		warmthPercentage = 50;
		
		health = gm.shipMaxHealth;
		energy = gm.maxEnergy;
		
		lastShotTime = -1;
		
		iTween.Init(gameObject); // advised by pixelplacement
		// gun doesn't rotate using iTweens (doesn't really rotate at all so it doesn't need this (for now atleast***)
		
		mTransform = transform;
		
		lastPos = trgtPos = mTransform.position;
		
		//couldMove = true;
		
		myGun = mTransform.Find("Gun");
		
		if (Mathf.Round(faceDir.x) != 0)
			faceDir.y = 0; // one component has to be zero "here"(in this game)(<= no transversal stuff) - HACK
		faceDir.Normalize();
		mTransform.rotation = Quaternion.LookRotation(new Vector3(faceDir.y, -faceDir.x), Vector3.forward);
		
		mMaterial = renderer.material;
		mMaterial.color = isYin ? gm.colorYin : gm.colorYang;
	}
	
	void OnGUI () {
		GUILayout.BeginArea(new Rect(Screen.width / 2 + statusOffsetX, 0, statusDimensions.x, statusDimensions.y));
			GUILayout.Label("Ship: " + health.ToString());
			GUILayout.Label("Core: " + core.health.ToString());
			GUILayout.Label("Energy: " + energy.ToString());
			GUILayout.Label("Warmth: " + warmthPercentage.ToString());
		GUILayout.EndArea();
	}
	
	IEnumerator CoolDown () {
		coolinDown = true;
		
		yield return new WaitForSeconds(gm.overheatShutdownInSecs);
		
		// ififififififififififiifififififififififififififififififififififififififififififif
		coolinDown = false;
	}
	
	protected virtual void Update () {
		// currentyl directly using coolinDown in Move for example to not allow moving
			// while coolinDown
		//==========================================================================
		if (warmthPercentage > 0) {
			if (Time.time - lastTime.energyCost > gm.coolDelay) {
				warmthLost += Time.deltaTime * gm.coolingSpd;
				
				if (warmthLost >= 1) {
					int intPart = (int)Mathf.Floor(warmthLost);
					warmthPercentage -= intPart;
					warmthLost -= intPart;
				}
			}
		}
		else {
			healthColdLost += Time.deltaTime * gm.freezeDmgPerSec;
			
			if (healthColdLost >= 1) {
				int intPart = (int)Mathf.Floor(healthColdLost);
				health -= intPart;
				
				if (health <= 0) {
					health = 0;
					core.health = 0;
					on = false;
					gm.on = false;
				}
				
				healthColdLost -= intPart;
			}
		}
		
		/*
		if (lastFrameTime == lastTime.energyCost) {
			warmthPercentage += 8;
			
			warmthPercentage = Mathf.Clamp(warmthPercentage, 0, 100);
			
			if (100 <= warmthPercentage) {
				on = false;
				StartCoroutine(CoolDown());
			}
		}
		else {
			if (0 < warmthPercentage && warmthPercentage <= 100) {
				warmthLost += Time.deltaTime * gm.coolingSpd;
				
				if (warmthLost >= 1) {
					int intPart = (int)Mathf.Floor(warmthLost);
					warmthPercentage -= intPart;
					warmthLost -= intPart;
				}
			}
			else if (warmthPercentage <= 0) {
				healthColdLost += Time.deltaTime * gm.freezeDmgPerSec;
				
				if (healthColdLost >= 1) {
					int intPart = (int)Mathf.Floor(healthColdLost);
					health -= intPart;
					
					if (health <= 0) {
						health = 0;
						core.health = 0;
						on = false;
						gm.on = false;
					}
					
					healthColdLost -= intPart;
				}
			}
		}
		
		lastFrameTime = Time.time;
		*/
		
		if (energy < gm.maxEnergy) {
			if (Time.time - lastTime.energyCost > gm.energyRecoveryDelay) {
				energyRecovered += Time.deltaTime * gm.energyRecoveryRate *
					(gm.maxEnergy - energy) / gm.maxEnergy;
				
				// int energy ==>
				if (energyRecovered >= 1) {
					int intPart = (int)Mathf.Floor(energyRecovered);
					energy += intPart;
					energyRecovered -= intPart;
				}
			}
		}
	
		InputHandling();
		
		if (Time.time - lastTime.colorChange > gm.colorChangeInterval && energy >= gm.energy.costColorChange) {
			switch (mInput.colorChange) {
				case BaseInput.ColorChange.Invert:
					lastTime.energyCost = lastTime.colorChange = Time.time;
					energy -= gm.energy.costColorChange;
					energyRecovered = 0;
					
					isYin = !isYin;
					mMaterial.color = isYin ? gm.colorYin : gm.colorYang;
					core.isYin = isYin;
					core.mMaterial.color = mMaterial.color;
					break;
				case BaseInput.ColorChange.Yin:
					if (isYin != true) {
						lastTime.energyCost = lastTime.colorChange = Time.time;
						energy -= gm.energy.costColorChange;
						energyRecovered = 0;
						
						isYin = true;
						mMaterial.color = gm.colorYin;
						core.isYin = true;
						core.mMaterial.color = mMaterial.color;
					}
					break;
				case BaseInput.ColorChange.Yang:				
					if (isYin != false) {
						lastTime.energyCost = lastTime.colorChange = Time.time;
						energy -= gm.energy.costColorChange;
						energyRecovered = 0;
						
						isYin = false;
						mMaterial.color = gm.colorYang;
						core.isYin = false;
						core.mMaterial.color = mMaterial.color;
					}
					break;
			}
		}
	}
	
	protected abstract void InputHandling ();
	
	protected bool CanGoTo (Vector2 pos) {
		return lm.InLevelBounds(pos) && !Occupied(pos);
	}
	
	protected bool Occupied (Vector2 pos) {
		return lm.blockPosList.Exists(l => HlpVect.EqualInt(l, pos))
			|| lm.ships.Exists(l => HlpVect.EqualInt(l.trgtPos, pos))
			|| lm.cores.Exists(l => HlpVect.EqualInt(transform.position, pos));
	}
	
	void OnTriggerEnter (Collider c) {
		//print(LayerMask.NameToLayer("explosion"));
		if (c.gameObject.layer == 11) {
			health -= gm.explosionDmg;
					
			if (health <= 0) {
				health = 0;
				core.health = 0;
				on = false;
				gm.on = false;
			}
		}
		else {
			// if collided with something it is sure to be a shot due to how the collision action matrix is set up
				// (hopefully)
			
			Shot shot = c.GetComponent<Shot>(); // should always have one as there's nothing else to collide with *******
			
			if (shot.instantiator != gameObject) {
				if (shot.isYin != isYin) {
					health -= gm.shotDmg;
					
					//health = Mathf.Clamp(health, 0, maxHealth);
					
					if (health <= 0) {
						health = 0;
						core.health = 0;
						on = false;
						gm.on = false;
					}
				}
			}
		}
	}
	
	protected void Shoot (Vector3 dir) {
		if (energy >= gm.energy.costShoot) {
			Shot newShot = (Instantiate(shot,
					new Vector3(mTransform.position.x, mTransform.position.y, shot.position.z)
						+ dir.normalized * shotOffset,
				shot.rotation) as Transform).GetComponent<Shot>();
			newShot.isYin = isYin;
			newShot.instantiator = gameObject;
			newShot.dir = dir.normalized;
			
			energy -= gm.energy.costShoot;
			
			energyRecovered = 0;
			
			lastTime.energyCost = lastShotTime = Time.time;
		}
	}
	
	protected void Move () {
		if (energy >= gm.energy.costMove && iTween.Count(gameObject, "MoveBy") == 0 && !coolinDown) {
			lastPos = trgtPos;
			trgtPos += mInput.moveAxes;
			
			/***********************************************************************************************************/
			if (lm.ships[0].trgtPos == lm.ships[1].trgtPos) {
				print(name);
			}
			
			iTween.MoveBy(gameObject, iTween.Hash("amount", (Vector3)mInput.moveAxes, "time", gm.moveTime,
				"easetype", iTween.EaseType.linear, "space", Space.World));
				
			energy -= gm.energy.costMove;
			lastTime.energyCost = Time.time;
			
			Boil(gm.moveHeat);
			
			//couldMove = true;
			
			OrientShip();
		}
		//else couldMove = false;
	}
	
	void Boil (int heat) {
		warmthPercentage += heat;
		
		if (warmthPercentage >= 100) {
			warmthPercentage = 100;
			StartCoroutine(CoolDown());
		}
	}
	
	// ain't this shitty, ehh? ********************************************************************************
	protected void OrientShip () {
		//if (iTween.Count(gameObject, "RotateAdd") == 0) { // not needed <= we're turning only when moving
			float angle = 0;
			
			if (HlpVect.EqualInt(Vector2.Scale(faceDir, mInput.moveAxes), Vector2.zero)) {
				angle = 90;
				
				if (HlpVect.EqualInt(faceDir, -Vector2.right)) {
					//print("facing left");
					angle *= HlpVect.EqualInt(mInput.moveAxes, Vector2.up) ? -1 : 1;
				}
				else if (HlpVect.EqualInt(faceDir, Vector2.right)) {
					//print("facing right");
					angle *= HlpVect.EqualInt(mInput.moveAxes, Vector2.up) ? 1 : -1;
				}
				else if (HlpVect.EqualInt(faceDir, -Vector2.up)) {
					//print("facing up");
					angle *= HlpVect.EqualInt(mInput.moveAxes, Vector2.right) ? 1 : -1;
				}
				else if (HlpVect.EqualInt(faceDir, Vector2.up)) {
					//print("facing down");
					angle *= HlpVect.EqualInt(mInput.moveAxes, Vector2.right) ? -1 : 1;
				}
			}
			else {
				if (faceDir != mInput.moveAxes)
					angle = 180;
			}
			
			if (angle != 0) {
				iTween.RotateAdd(gameObject, iTween.Hash("z", angle, "time", gm.moveTime,
					"easetype", iTween.EaseType.easeInOutSine , "space", Space.World));
				
				faceDir = mInput.moveAxes;
			}
			
			angleTurned = angle;
		//}
	}
}
